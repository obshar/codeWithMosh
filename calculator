package com.codewithmosh;

import java.text.NumberFormat;
import java.util.Scanner;

public class Main {
    final static byte MONTHS_IN_YEAR = 12;
    final static byte PERCENT = 100;
    public static void main(String[] args) {

        int principal = (int) readNumber("Principal:", 1000, 1_000_000);
        float annualInterest = (float) readNumber("Annual intrest rate: ", 1, 10);
        byte years =(byte) readNumber("period (years): ", 1, 30);


        double mortgage = calculateMortgage(principal, annualInterest, years);
        String mortgageFormatted = NumberFormat.getCurrencyInstance().format(mortgage);
        System.out.println("Mortgae\n------- \nMonthly Payment: " + mortgageFormatted);

        System.out.println();
        System.out.println("PAYMENT SCHEDULE");
        System.out.println("--------------");
        for(short month = 0; month <= years*MONTHS_IN_YEAR; month++){
            double balance = calculateBalance(principal, annualInterest, years, month);
            System.out.println(NumberFormat.getCurrencyInstance().format(balance));
        }
            }

    public static double readNumber(String prompt, double min, double max) {
        Scanner scanner = new Scanner(System.in);
        double value;
        while (true) {
            System.out.print(prompt);
            value = scanner.nextInt();
            if (value >= min && value <= max)
                break;
            System.out.println("Enter a value between " + min + "and" + max);
        }
        return value;
    }
    public static double calculateMortgage(int principal, float annualInterest, byte years) {
        float numberOfPayments = years * MONTHS_IN_YEAR;
        float monthlyInterest = annualInterest / PERCENT / MONTHS_IN_YEAR;
        double mortgage = principal
                * (monthlyInterest * Math.pow(1 + monthlyInterest, numberOfPayments))
                / (Math.pow(1 + monthlyInterest, numberOfPayments) - 1);
        return mortgage;
    }


    public static double calculateBalance(int principal, float annualInterest, byte years, short numberOfPaymentsMade){

        float numberOfPayments = years * MONTHS_IN_YEAR;
        float monthlyInterest = annualInterest / PERCENT / MONTHS_IN_YEAR;
        double balance = principal
                * (Math.pow(1+monthlyInterest, numberOfPayments)- Math.pow(1+monthlyInterest, numberOfPaymentsMade))
                /  (Math.pow(1+monthlyInterest, numberOfPayments)- 1);
        return balance;

    }

  
}
